<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	
	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- context-param : 모든 웹프로그램 실행에 필요한 값을 제공하기 위한 Element -->
	<!-- ㄴ contextConfigLocation 이름으로 Spring Container(WebApplicationContext 객체)에게
	Spring Bean Configuration File의 경로를 제공 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<!-- 모든 웹프로그램에서 사용할 수 있는 Spring Bean을 등록하기 위한 Spring Bean Configuration File -->
		<!-- ㄴ 모든 Front Controller 역할을 하는 웹프로그램에게 필요한 객체를 제공하기 위해 Spring Bean으로 등록 -->
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<!-- listener : WAS 실행 시 Listener 클래스를 제공받아 객체로 생성하기 위한 Element -->
	<!-- Listener 클래스 : ServletContextListener 인터페이스를 상속받은 자식 클래스 -->
	<!-- ㄴ ★contextInitialized 메소드 : Listener 객체 생성 후 자동 호출되는 메소드 - 초기화 작업 -->
	<!-- ㄴ contextDestroyed 메소드 : Listener 객체 소멸 전 자동 호출되는 메소드 - 마무리 작업 -->
	<listener>
		<!-- listener-class : ServletContextListener 인터페이스를 상속받은 자식 클래스를 설정하기 위한 Element -->
		<!-- ㄴ WAS가 시작될 때 ContextLoaderListener 클래스를 객체로 생성하고 contextInitialized 메소드를
		호출하여 초기화 작업 -->
		<!-- ContextLoaderListener 클래스의 contextInitialized 메소드에서 Spring Container를 생성하고
		Spring Bean Configuration File을 제공받아 클래스를 Spring Bean으로 등록된 클래스를 객체로 생성 -->
		<!-- Listener 객체의 메소드에 의해 생성된 Spring Container(WebApplicationContext 객체)는
		모든 웹자원(Servlet 또는 Filter)에게 공유되어 Spring Bean을 제공 -->
		<!-- ㄴ WebApplicationContext 객체는 기본적으로 src/main/webapp 폴더의 Spring Bean 
		Configuration File 파일만 제공받아 처리 가능 -->
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- filter : Filter 클래스를 Filter로 등록하기 위한 Element -->	
	<!-- ㄴ Filter : Servlet(웹프로그램) 실행 전과 후에 실행될 명령을 제공 -->
	<filter>
		<!-- filter-name : Filter를 구분하기 위한 식별자를 설정하기 위한 Element -->
		<filter-name>encodingFilter</filter-name>
		<!-- filter-class : 클라이언트 요청에 의해 객체로 생성되어 실행될 Filter 클래스를 설정하는 Element -->
		<!-- CharacterEncodingFilter : Request Message의 Body에 저장된 값에 대한 문자 형태를
		변경하기 위한 Filter 클래스 -->
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!-- init-param Element를 이용하여 CharacterEncodingFilter 클래스에 의해 변경하고자 하는
		문자 형태(Characterset)를 제공 -->
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	
	<!-- filter-mapping : Filter가 실행되기 위한 웹프로그램의 요청 URL 주소의 패턴을 등록하기 위한 Element -->
	<filter-mapping>
		<!-- filter-name : 클라이언트 요청에 의해 실행될 Filter의 식별자를 설정하기 위한 Element -->
		<filter-name>encodingFilter</filter-name>
		<!-- url-pattern : Filter가 실행되기 위한 웹프로그램의 요청 URL 주소의 패턴을 설정하기 위한 Element -->
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- servlet : Servlet 클래스를 Servlet(웹프로그램)으로 등록하기 위한 Element -->
	<servlet>
		<!-- servlet-name : Servlet을 구분하기 위한 식별자를 설정하기 위한 Element -->
		<servlet-name>mvc</servlet-name>
		<!-- servlet-class : 클라이언트 요청에 의해 객체로 생성되어 실행될 Servlet 클래스를
		설정하기 위한 Element -->
		<!-- DispatcherServlet 클래스 : Controller 역할을 제공하는 클래스 - Front Controller -->
		<servlet-class>xyz.itwill09.mvc.DispatcherServlet</servlet-class>
	</servlet>
	
	<!-- servlet-mapping : Servlet을 요청하기 위한 URL 주소의 패턴을 등록하기 위한 Element -->
	<servlet-mapping>
		<!-- servlet-name : 클라이언트 요청에 의해 실행될 Servlet의 식별자를 설정하기 위한 Element -->
		<servlet-name>mvc</servlet-name>
		<!-- url-pattern : Servlet을 실행하기 위한 URL 주소의 패턴을 설정하기 위한 Element -->
		<!-- ㄴ Front Controller 역할을 제공하는 Servlet은 클라이언트의 모든 요청을 받아 처리되도록 설정 -->
		<url-pattern>*.itwill</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>springMvc</servlet-name>
		<!-- Spring Framework의 라이브러리에 의해 제공되는 DispatcherServlet 클래스 사용 - Front Controller -->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- init-param : Servlet 클래스에게 값을 제공하기 위한 Element -->
		<!-- ㄴ contextConfigLocation 이름으로 Spring Container(WebApplicationContext 객체)에게
		Spring Bean Configuration File의 경로를 제공 -->
		<!-- ㄴ 현재 설정된 Front Controller 역할의 객체에게만 제공한 Spring Bean을 등록하기 위한
		Spring Bean Configuration File -->
		<!-- ㄴ Spring Bean Configuration File은 [엔터] 또는 [,] 또는 [;] 으로 구분하여 여러 개 제공 가능 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/spring/springMvc/mvc-context1.xml
				/WEB-INF/spring/springMvc/mvc-context2.xml
			</param-value>
		</init-param>
		<!-- load-on-startup : WAS 시작 시 Servlet 클래스를 미리 객체로 생성하기 위한 Element -->
		<!-- ㄴ 클라이언트가 Servlet(Front Controller)을 요청하지 않아도 Servlet 객체를 미리 생성 -->
		<!-- ㄴ Element 내용으로 설정된 정수값이 작을수록 먼저 실행 -->
		<load-on-startup>0</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>springMvc</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- Spring Annotation을 검색하는 component-scan Element를 사용한 Spring Bean Configuration File은
			하나만 제공 가능 -->
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<!-- url-pattern Element의 내용을 [/]로 설정한 경우 클라이언트의 모든 웹프로그램 요청에 대한
		처리가 가능하도록 설정 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>