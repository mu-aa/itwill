<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- 핵심관심모듈로 작성된 클래스를 Spring Bean으로 등록 -->
	<bean class="xyz.itwill07.aop.StudentDAOImpl" id="studentDAO" />
	<bean class="xyz.itwill07.aop.StudentServiceImpl" id="studentService">
		<property name="studentDAO" ref="studentDAO" />
	</bean>
	
	<!-- 횡단관심모듈로 작성된 클래스를 Spring Bean으로 등록 -->
	<bean class="xyz.itwill07.aop.StudentAdvice" id="studentAdvice" />
	
	<!-- Spring AOP(Aspect Oriented Programming - 관점지향 프로그래밍) : AspectJ 컴파일러에 의해
	프로그램 실행 시 핵심관심코드와 횡단관심코드가 결합(Weaving)되어 동작하기 위한 기능 제공 -->
	<!-- Spring AOP 기능을 사용하기 위해서는 aspectjrt 라이브러리와 aspectjweaver 라이브러리를
	프로젝트에 Build 처리 - Maven 사용 : pom.xml -->
	<!-- Spring Bean Configuration File에서 Spring AOP 기능을 구현하고자 할 경우 AOP Namespaces를
	추가하여 spring-aop.xsd 파일의 Element로 설정 -->
	
	<!-- config : Spring AOP 관련 설정을 제공하기 위한 Element -->
	<aop:config>
		<!-- aspect : 핵심관심코드에 횡단관심코드를 원하는 위치(JoinPoint)에 삽입되어 실행되도록 설정하는 Element -->
		<!-- ㄴ 횡단관심코드가 삽입될 위치(JoinPoint)를 지정하기 위해 하위 Element 사용 -->
		<!-- ㄴ before, after, after-returning, after-throwing, around -->
		<!-- ref 속성 : 횡단관심모듈로 작성된 클래스(Advice Class)에 대한 Spring Bean의 식별자(beanName)를 속성값으로 설정 -->
		<aop:aspect ref="studentAdvice">
			<!-- before : 핵심관심코드 실행 전에 횡단관심코드를 삽입하여 실행되도록 설정하기 위한 -->
			<!-- method 속성 : Advice Class의 메소드명(횡단관심코드가 작성된 메소드)을 속성값으로 설정 -->
			<!-- pointcut 속성 : 핵심관심모듈의 메소드 중 횡단관심모듈의 메소드가 삽입된 target 메소드를 지정하기 위한
			PointCut 표현식을 속성값으로 설정 -->
			<!-- ㄴ execution 함수 또는 within 함수에 검색패턴문자와 연산자를 사용하여 target 메소드 설정 -->
			<!-- ㄴ PointCut 표현식으로 사용 가능한 검색패턴문자 : [..] - 0개 이상, [*] - 1개 이상, ? - 0개 또는 1개 -->
			<!-- ㄴ PointCut 표현식으로 사용 가능한 연산자 : !(Not), &&(And), ||(Or) -->
			
			<!-- execution 함수를 이용하여 target 메소드를 지정하는 방법 -->
			<!-- ㄴ execution 함수에 메소드의 머릿부를 표현하여 target 메소드 지정 -->
			<!-- 형식) execution([접근지정자] 반환형 [패키지.클래스.]메소드명(자료형, 자료형, ...)) -->
			<!-- ㄴ 클래스 대신 인터페이스 사용 가능 - 인터페이스를 상속받은 모든 자식클래스 표현 -->
			<!-- ㄴ 반환형 또는 매개변수의 자료형이 클래스(인터페이스)인 경우 패키지를 포함하여 표현 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(void addStudent(xyz.itwill07.aop.Student))" /> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(..))" /> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop..*(..))" /> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop.StudentDAO.*(..))" /> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(xyz.itwill07.aop.Student *(..))" /> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* get*(..))" /> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(int)) or execution(int *(..))" /> -->
			
			<!-- within 함수를 이용하여 target 메소드를 지정하는 방법 -->
			<!-- ㄴ Spring Bean으로 등록된 클래스(핵심관심모듈)의 모든 메소드를 target 메소드로 지정 -->
			<!-- 형식) within(패키지.클래스명) -->
			<!-- ㄴ 클래스 대신 인터페이스 사용 불가능 -->
			<!-- ㄴ 검색패턴문자 사용 가능 -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill07.aop.StudentDAOImpl)"/> -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill07.aop.StudentServiceImpl)"/> -->
			
			<!-- pointcut : 핵심관심모듈의 메소드 중 횡단관심모듈의 메소드가 삽입된 target 메소드를 지정하기 위한 Element -->
			<!-- ㄴ 자주 사용되는 PointCut 표현식을 저장하여 target 메소드에 대한 정보 제공 -->
			<!-- ㄴ aspect Element 선언 전에 작성하거나 aspect Element의 하위 Element로 작성 -->
			<!-- expression 속성 : target 메소드를 지정하기 위한 PointCut 표현식을 속성값으로 설정 -->
			<!-- id 속성 : PointCut 표현식을 구분하기 위한 식별자를 속성값으로 설정 -->
			<aop:pointcut expression="execution(* xyz.itwill07..StudentDAO.*(..))" id="studentDAOPointCut"/>
			<aop:pointcut expression="execution(* xyz.itwill07..StudentService.*(..))" id="studentServicePointCut"/>
			
			<!-- pointcut-ref 속성 : pointcut Element의 식별자를 속성값으로 설정 -->
			<!-- <aop:before method="beforeLog" pointcut-ref="studentDAOPointCut"/> -->
			<aop:before method="beforeLog" pointcut-ref="studentServicePointCut"/>
			
			<!-- after : 핵심관심코드 실행 후 예외 발생과 상관 없이 횡단관심코드를 삽입하여 실행되도록 설정하는 Element -->
			<aop:after method="afterLog" pointcut-ref="studentServicePointCut"/>
			
			<!-- after-returning : 핵심관심코드가 정상적으로 실행된 후 횡단관심코드를 삽입하여 실행되도록 설정하는 Element -->
			<aop:after-returning method="afterReturningLog" pointcut-ref="studentServicePointCut"/>
			
			<!-- after-throwing : 핵심관심코드 실행 시 예외가 발생된 후 횡단관심코드를 삽입하여 실행되도록 설정하는 Element -->
			<aop:after-throwing method="afterThrowingLog" pointcut-ref="studentServicePointCut"/>
			
			<!-- around : 핵심관심코드 실행 전과 후에 횡단관심코드를 삽입하여 실행되도록 설정하는 Element -->
			<aop:around method="aroundLog" pointcut-ref="studentServicePointCut"/>
		</aop:aspect>
	</aop:config>
</beans>