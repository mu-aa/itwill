package xyz.itwill.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import lombok.RequiredArgsConstructor;
import xyz.itwill.dao.CardDAO;
import xyz.itwill.dao.ExpensesCollection;
import xyz.itwill.dao.ExpensesDAO;
import xyz.itwill.dto.Card;
import xyz.itwill.dto.Expenses;
import xyz.itwill.dto.Member;

@Controller
@RequiredArgsConstructor
public class CalendarController {
	
	private static final Logger logger = LoggerFactory.getLogger(CalendarController.class);
	private final ExpensesDAO expensesDAO;
	private final CardDAO cardDAO;
	
	@RequestMapping(value="/calendar", method=RequestMethod.GET)
	public String calender() {
		return "calendar/fullcalendar";
	}
	
	@RequestMapping(value="/calendar/popup", method=RequestMethod.GET)
	public String calenderPapup(@RequestParam String date,HttpServletRequest request,Model model) throws Exception {
		HttpSession session = request.getSession();
		
		
		SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat format2 = new SimpleDateFormat("yyyy/MM/dd");
		
		 Date javaDate = format1.parse(date);
		 String oracleDateString = format2.format(javaDate);
		
	
		 List<Card> cardList =cardDAO.selectCardList();
		
		 
	
		 model.addAttribute("cardList", cardList);
		 model.addAttribute("oracleDate", oracleDateString);
		return "calendar/fullcalendarpopup";
		
	}
	@RequestMapping(value="/calendar/popup", method=RequestMethod.POST)
	public String calenderPapup(ExpensesCollection expensesCollection) throws Exception {
		List<Expenses> expensesList = expensesCollection.getExpensesList();
		
		for(Expenses expenses:expensesList) {
			expensesDAO.updateExpenses(expenses);
		}
		return "calendar/fullcalendarpopup";
		
	}
}
