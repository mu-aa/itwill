package xyz.itwill.controller;

import java.lang.reflect.Array;
import java.time.LocalDate;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import lombok.RequiredArgsConstructor;
import oracle.jdbc.driver.json.binary.JsonpOsonArray;
import oracle.sql.json.OracleJsonArray;
import xyz.itwill.dto.Expenses;
import xyz.itwill.dto.Member;
import xyz.itwill.exception.ExistsUserinfoException;
import xyz.itwill.exception.LoginAuthFailException;
import xyz.itwill.exception.UserinfoNotFoundException;
import xyz.itwill.service.ExpensesService;
import xyz.itwill.service.IncomeService;
import xyz.itwill.service.MemberService;

/**
 * Handles requests for the application home page.
 */
@Controller
@RequiredArgsConstructor
public class HomeController {
	private final ExpensesService expensesService;
	private final IncomeService incomeService;
	private final MemberService memberService;
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	@RequestMapping(value="/", method=RequestMethod.GET)
	public String main(Model model) {
		model.addAttribute("expensesSumAll", expensesService.getSumAllExpenses());
		model.addAttribute("incomeSumAll", incomeService.getSumAllIncome());
		model.addAttribute("expensesList", expensesService.getExpensesList());
		
		return "main";
	}
	
	@ResponseBody
	@RequestMapping(value="/", method=RequestMethod.POST)
	public String main(Model model, @RequestParam List<Expenses> expensesList) {
		
		for(Expenses expenses:expensesList) {
			if(expensesService.getExpenses(expenses.getExNo())==null) {
				System.out.println("(add)expenses.getExNo() = "+expenses.getExNo());
				if(expenses.getExCate()==null) { expenses.setExCate("미분류"); }
				if(expenses.getExAcname()==null) { expenses.setExAcname("미지정"); }
				if(expenses.getExDate()==null || expenses.getExDate().equals("")) {
					expenses.setExDate(LocalDate.now().toString().substring(0,10)); }
				if(expenses.getExCard()==null) { expenses.setExCard(0); }
				if(expenses.getExCash()==null) { expenses.setExCash(0); }
				if(expenses.getExId()==null) { expenses.setExId("testID"); }
				expensesService.addExpenses(expenses);
			} else if(expensesService.getExpenses(expenses.getExNo())!=null) {
				System.out.println("(modify)expenses.getExNo() = "+expenses.getExNo());
				expensesService.modifyExpenses(expenses);
			}
		}
		
		return "redirect:/";
	}
	
	@RequestMapping(value="/remove", method=RequestMethod.POST)
	@ResponseBody
	public String remove(HttpServletRequest request) {
		String[] exNoList=request.getParameterValues("exNoList");
		
		for(String exNo:exNoList) {
			expensesService.removeExpenses(Integer.parseInt(exNo));
		}
		
		return "main";
	}
	
	

	
	
	
	
	
	
	
	
	
	
	//회원가입 관련
	@RequestMapping(value="/join", method=RequestMethod.GET)
	public String join() {
		return "join/JoinForm";
	}
	@RequestMapping(value="/join", method=RequestMethod.POST)
	public String join(@ModelAttribute Member member) throws ExistsUserinfoException {
		memberService.addMember(member);
		return "redirect:/login";
	}	
	@RequestMapping(value="/idcheck", method=RequestMethod.GET)
	@ResponseBody
	public String idChekc(@RequestParam String userid) throws UserinfoNotFoundException {
		Member member=memberService.getMember(userid);
		return "fail";
	}
	
	
	//로그인 관련
	@RequestMapping(value="/login", method=RequestMethod.GET)
	public String login() {
		return "login/LoginForm";
	}
	@RequestMapping(value="/login", method=RequestMethod.POST)
	public String login(@ModelAttribute Member member, HttpSession session) throws LoginAuthFailException {
		Member authMember=memberService.loginAuth(member);
		session.setAttribute("loginMember", authMember);
		return "redirect:/";
	}
	//로그아웃 관련
	@RequestMapping("/logout")
	public String login(HttpSession session) {
		session.invalidate();
		//
		return "redirect:/";
	}
	//내정보 보기 관련
	@RequestMapping("/view")
	public String view(@RequestParam String userid, Model model) throws UserinfoNotFoundException {
		model.addAttribute("member", memberService.getMember(userid));
		return "login/loginView";
	}
	//내정보 변경 관련
	public String modify(@RequestParam String userid, Model model) throws UserinfoNotFoundException {
		model.addAttribute("member", memberService.getMember(userid));
		return "login/loginView";
	}
	
	
	@RequestMapping(value="/budget", method=RequestMethod.GET)
	public String budget() {
		return "table/budget";
	}
	/*
	@RequestMapping(value="/income", method=RequestMethod.GET)
	public String income() {
		return "income/income";
	}
	*/
	@RequestMapping(value="/myAccount", method=RequestMethod.GET)
	public String myAccount() {
		return "popup/myAccount";
	}
	
	@ExceptionHandler(UserinfoNotFoundException.class)
	@ResponseBody
	public String exceptionHanlder() {
		return "success";
	}
}