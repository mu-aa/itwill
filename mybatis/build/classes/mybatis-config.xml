<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "https://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- mybatis 환경설정 파일 : SqlSessionFactory 객체를 생성하기 위해 필요한 정보를 제공하는 파일 -->
<configuration>
	<!-- properties : 1개 이상의 property 엘리먼트를 등록하기 위한 상위 엘리먼트 -->
	<!-- resource 속성 : Properties 파일의 경로를 속성값으로 설정 -->
	<!-- => property 엘리먼트 대신 Properties 파일에서 제공되는 값을 mybatis 환경설정 파일에서 사용 가능 -->
	<properties resource="dbms.properties">
		<!-- property : mybatis 환경설정 파일에 필요한 값을 제공하는 엘리먼트 -->
		<!-- => 다른 엘리먼트에서 ${이름} 형식으로 표현하여 property 엘리먼트의 값을 제공받아 사용 -->
		<!-- => 다수의 엘리먼트에서 공통적으로 사용되는 값을 제공하기 위해 설정 - 유지보수의 효율성 증가 -->
		<!-- name 속성 : property 엘리먼트를 구분하기 위한 식별자를 속성값으로 설정 -->
		<!-- value 속성 : property 엘리먼트를 제공하기 위한 값을 속성값으로 설정 -->
		<property name="oracleDriver" value="oracle.jdbc.driver.OracleDriver"/>
	</properties>

	<!-- settings : 1개 이상의 setting 엘리먼트를 등록하기 위한 상위 엘리먼트 -->
	<settings>
		<!-- setting : mybatis 프레임워크가 실행될 때 필요한 값을 제공하기 위한 엘리먼트 -->
		<!-- => setting 엘리먼트를 설정하지 않아도 실행에 필요한 값은 기본값으로 제공받아 사용 -->
		<!-- => 기본값이 아닌 값을 사용할 경우에만 setting 엘리먼트를 설정하여 실행에 필요한 값을 제공받아 사용 -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
		<setting name="jdbcTypeForNull" value="NULL"/>
		<setting name="callSettersOnNulls" value="true"/>
	</settings>

	<!-- typeAliases : 1개 이상의 typeAlias 엘리먼트를 등록하기 위한 상위 엘리먼트 -->
	<typeAliases>
		<!-- typeAlias : XML 기반의 mapper 파일에서 Java 자료형을 간단하게 표현하기 위한 
		별칭(AliasName)을 설정하기 위한 엘리먼트 -->
		<!-- => mybatis 프레임워크는 내부적으로 설정된 Java 자료형에 대한 별칭 제공 -->
		<!-- type 속성 : Java 자료형을 속성값으로 설정 -->
		<!-- alias 속성 : Java 자료형 대신 사용할 별칭을 속성값으로 설정 -->
		<!-- <typeAlias type="xyz.itwill.dto.Student" alias="Student"/> package Element에 의해 생략 -->
		<!-- <typeAlias type="xyz.itwill.dto.MyMember" alias="MyMember"/> package Element에 의해 생략 -->
		
		<!-- package : 특정 패키지에 작성된 모든 클래스에 별칭을 자동으로 등록하는 Element -->
		<!-- ㄴ 패키지에 작성된 모든 클래스는 패키지를 제외한 클래스 이름을 별칭으로 자동 등록 -->
		<package name="xyz.itwill.dto"/>
	</typeAliases>

	<!-- environments : 1개 이상의 environment 엘리먼트를 등록하기 위한 상위 엘리먼트 -->
	<!-- default 속성 : environment 엘리먼트의 식별자(id 속성값)를 속성값으로 설정 -->
	<!-- => mybatis 프레임워크가 기본적으로 사용하기 위한 DBMS 서버를 표현하기 위한 속성 -->
	<environments default="development">
		<!-- environment : DBMS 서버 접속에 필요한 정보를 설정하기 위한 엘리먼트 -->
		<!-- id 속성 : environment 엘리먼트를 구분하기 위한 식별자를 속성값으로 설정 -->
		<environment id="development">
			<!-- transactionManager : 트렌젝션 관리자(커밋 또는 롤백 처리)를 설정하기 위한 엘리먼트 -->
			<!-- type 속성 : [JDBC] 또는 [MANAGED] 중 하나를 속성값으로 설정 -->
			<!-- => JDBC 속성값 : JDBC 기능(Connection 객체의 메소드 호출)을 사용하여 직접 트렌젝션 관리 -->
			<!-- => MANAGED 속성값 : 트렌젝션을 관리하는 프로그램을 사용하여 트렌젝션 관리 -->
			<transactionManager type="JDBC"/>
			<!-- dataSource : Connection 객체 생성에 필요한 정보를 설정하기 위한 엘리먼트 -->
			<!-- type 속성 : [UNPOOLED], [POOLED], [JNDI] 중 하나를 속성값으로 설정 -->
			<!-- => type 속성값에 따라 하위 엘리먼트 설정을 다르게 설정 -->
			<!-- => UNPOOLED 속성값 : Connection 객체를 미리 생성하지 않고 실행시 생성하여 제공 -->
			<!-- => POOLED 속성값 : 다수의 Connection 객체를 미리 생성하여 실행시 제공 - DBCP -->
			<!-- => JNDI 속성값 : WAS에 등록된 자원을 이용하여 실행시 Connection 객체를 제공 -->
			<dataSource type="POOLED">
				<!-- property : Connection 객체를 생성하기 위한 값을 제공하는 엘리먼트 -->
				<!-- name 속성 : Connection 객체 생성에 필요한 값이 저장될 이름을 속성값으로 설정 -->
				<!-- value 속성 : Connection 객체 생성에 필요한 값을 속성값으로 설정 -->
				<!-- <property name="driver" value="oracle.jdbc.driver.OracleDriver"/> -->
				<property name="driver" value="${oracleDriver}"/>
				<!-- <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/> -->
				<property name="url" value="${local}"/>
				<property name="username" value="scott"/>
				<property name="password" value="tiger"/>
			</dataSource>
		</environment>
	</environments>
	
	<!-- mappers : 1개 이상의 mapper 엘리먼트를 등록하기 위한 상위 엘리먼트 -->
	<mappers>
		<!-- mapper : mapper(Mapper)을 등록하기 위한 엘리먼트 -->
		<!-- mapper(Mapper) : SQL 명령에 필요한 값을 전달받아 SQL 명령을 등록하고 실행결과를
		Java 객체(원시형)로 mapping하기 위한 정보를 제공 -->
		<!-- mybatis 프레임워크에는 XML 기반의 mapper 파일과 Interface 기반의 mapper 파일을 이용하여 mapper 설정 -->
		<!-- => ibatis 프레임워크에는 XML 기반의 mapper 파일로만 mapper 설정 가능 -->
		<!-- resource 속성 : XML 기반의 mapper 파일에 경로를 속성값으로 설정 -->
		<!-- => XML 기반의 mapper 파일에 경로는 파일 시스템 경로를 기반으로 작성 -->
		<!-- XML 기반의 mapper 파일의 장점 : 수동 mapping 설정과 동적 SQL 설정에 대한 기능 구현이 편리 -->
		<!-- XML 기반의 mapper 파일의 단점 : SqlSession 객체로 SQL 명령을 제공받아 사용하기 불편 -->
		<mapper resource="xyz/itwill/mapper/StudentMapper.xml"/>
		<mapper resource="xyz/itwill/mapper/MyMemberXMLMapper.xml"/>
		
		<!-- class 속성 : Interface 기반의 mapper 파일 경로를 속성값으로 설정 -->
		<!-- ㄴ Interface 기반의 mapper 파일 경로는 Java 자료형을 기반으로 작성 -->
		<!-- Interface 기반의 mapper 파일의 장점 : SqlSession 객체로 SQL 명령을 제공받아 사용하기 편리 -->
		<!-- Interface 기반의 mapper 파일의 단점 : 수동 mapping 설정과 동적 SQL 설정에 대한 기능 구현이 불편 -->
		<!-- <mapper class="xyz.itwill.mapper.MyMemberInterFaceMapper"/> package Element에 의해 생략 -->
		
		<!-- XML 기반의 mapper 파일과 interface 기반의 mapper 파일을 하나의 mapper로 동작되도록 설정 -->
		<!-- Mapper Binding : SQL 명령은 XML 기반의 Mapper 파일에 등록하고 DAO 클래스의 메소드는
		Interface 기반의 Mapper 파일의 추상메소드를 호출하여 작성 -->
		<!-- mapper Element에는 XML 기반의 mapper 파일만 등록하여 사용 -->
		<!-- <mapper resource="xyz/itwill/mapper/MyMemberMapper.xml"/> package Element에 의해 생략 -->
		
		<!-- package : 특정 패키지에 작성된 모든 interface 기반의 Mapper 파일을 자동으로 Mapper로
		 등록하기 위한 Element -->
		<!-- name 속성 : interface 기반의 Mapper 파일이 작성된 package를 속성값으로 설정 -->
		<package name="xyz.itwill.mapper"/>
	</mappers>
</configuration>