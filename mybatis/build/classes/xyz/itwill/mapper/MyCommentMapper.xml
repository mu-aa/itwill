<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.itwill.mapper.MyCommentMapper">
	<!-- cache : SELECT 명령의 검색결과를 임시 메모리(Cache Memory)에 저장하여 빠른 검색결과를
	제공하기 위한 Element - 가독성 증가 -->
	<!-- ㄴ INSERT, UPDATE, DELETE 명령이 실행되면 임시 메모리에 저장된 검색결과는 자동 초기화 -->
	<!-- ㄴ 검색결과를 저장하는 객체는 반드시 객체 직렬화 클래스로 작성 -->
	
	<!-- 테이블의 컬럼명과 같은 이름의 필드를 선언하여 클래스 작성 - 자동 mapping
	XML 기반의 Mapper 파일에서 cache Element를 사용한 경우 SELECT 명령에 대한 검색결과로 제공될
	객체의 클래스는 반드시 객체 직렬화 클래스 선언
	ㄴ 객체 직렬화 클래스는 Serializable 인터페이스를 상속받아 작성
	ㄴ 객체 직렬화 클래스는 serialVersionUID (static final)필드 선언 -->
	<cache/>
	


	<insert id="insertComment1" parameterType="MyComment1">
		insert into mycomment values(mycomment_seq.nextval, #{commentId}, #{commentContent}, sysdate)
	</insert>
	
	<insert id="insertComment2" parameterType="MyComment1">
		<!-- selectKey : SELECT 명령의 검색 결과값을 insert 엘리먼트의 parameterType 속성값으로
		설정된 클래스의 필드값으로 저장하기 위한 엘리먼트 - insert 엘리먼트에 종속된 엘리먼트 -->
		<!-- => 자동 증가값 또는 난수값을 SELECT 명령으로 검색하여 객체의 필드에 저장하여 INSERT 명령에서 사용하기 위해 작성 -->
		<!-- resultType 속성 : SELECT 명령으로 검색된 결과값을 반환받기 위한 Java 자료형을 속성값으로 설정 -->
		<!-- keyProperty 속성 : insert 엘리먼트의 parameterType 속성값으로 설정된 클래스의 필드명을 속성값으로 설정 -->
		<!-- => SELECT 명령의 검색 결과값을 제공받아 Java 객체의 필드에 저장하기 위해 설정 -->
		<!-- order 속성 : BEFORE 또는 AFTER 중 하나를 속성값으로 설정 -->
		<selectKey resultType="int" keyProperty="commentNo" order="BEFORE">
			select mycomment_seq.nextval from dual
		</selectKey>
		insert into mycomment values(#{commentNo}, #{commentId}, #{commentContent}, sysdate)
	</insert>
	
	<!-- resultType 속성을 사용하여 자동 매핑 기능으로 Java 객체 제공 -->
	<!-- => 검색행의 컬럼명과 resultType 속성값으로 설정된 클래스의 필드명이 같도록 작성 -->
	<select id="selectCommentList1" resultType="MyComment1">
		select * from mycomment order by comment_no desc
	</select>
	
	
	
	
	
	<!-- 검색행의 컬럼명을 resultType 속성값으로 설정된 클래스의 필드명과 같도록 Column Alias 기능을
	사용하여 검색 - 컬럼 별칭으로 사용하기 부적절한 단어는 "" 기호를 사용하여 표현 - 자동 mapping -->
	<!-- 
	<select id="selectCommentList2" resultType="MyComment2">
		select comment_no no, comment_id id, comment_content content, comment_date "date"
		 from mycomment order by comment_no desc
	</select>
	 -->
	 
	<!-- resultMap Element를 이용하여 검색행의 컬럼값을 클래스의 필드에 저장되도록 설정 -->
	<!-- ㄴ setter 메소드를 이용한 수동 mapping -->
	<!-- ㄴ type 속성값으로 설정된 Java 클래스의 기본 생성자로 객체를 생성하고 검색행의 컬럼값에 id Element 
	또는 resultElement를 사용하여 객체의 Setter 메소드를 호출하여 필드값이 변경되도록 처리 -->
	<resultMap type="MyComment2" id="MyComment2ResultMap">
		<id column="comment_no" property="no"/>	
		<result column="comment_id" property="id"/>
		<result column="comment_content" property="content"/>
		<result column="comment_date" property="date"/>
	</resultMap>
	
	<!-- select Element의 resultMap 속성을 사용하여 검색행을 Java 객체로 수동 mapping하여 제공 -->
	<!-- 
	<select id="selectCommentList2" resultMap="MyComment2ResultMap">
		select * from mycomment order by comment_no desc
	</select>
	 -->
	 
	<!-- constructor Element를 사용하여 type 속성값으로 설정된 Java 클래스의 매개변수가 있는 생성자로
	객체를 생성하고 생성자 매개변수에 검색행의 컬럼값을 전달하여 객체의 필드에 저장되도록 mapping 처리 -->
	<!-- ㄴ 생성자를 이용한 수동 mapping -->
	<resultMap type="MyComment2" id="MyComment2ConstructorResultMap">
		<!-- constructor : type 속성값으로 설정된 Java 클래스의 생성자를 이용하여 
		mapping 처리하기 위한 정보를 제공하는 Element -->
		<!-- ㄴ 하위 Element : idArg, arg -->
		<!-- ㄴ 생성자 매개변수와 하위 Element 갯수, 자료형이 동일해야 mapping 가능 -->
		<constructor>
			<!-- idArg : 검색행의 컬럼값을 생성자 매개변수에 전달하기 위한 Element -->
			<!-- ㄴ PK 제약조건이 설정된 컬럼값을 제공받아 생성자 매개변수에 저장하기 위해 사용 -->
			<!-- column 속성 : 검색행의 컬럼명을 속성값으로 설정 -->
			<!-- javaType 속성 : 생성자 매개변수의 자료형을 속성값으로 설정 -->
			<!-- ㄴ Java 자료형 대신 typeAlias Element로 설정된 별칭 사용 가능 -->
			<idArg column="comment_no" javaType="_int"/>
			<!-- arg : 검색행의 컬럼값을 생성자 매개변수에 전달하기 위한 Element -->
			<arg column="comment_id" javaType="string"/>
			<!-- 
			<arg column="comment_content" javaType="string"/>
			<arg column="comment_date" javaType="string"/>
			-->
		</constructor>
		<!-- constructor Element와 result Element를 동시에 사용해 mapping 처리 가능 -->
		<result column="comment_content" property="content"/>
		<result column="comment_date" property="date"/>
	</resultMap>
	<select id="selectCommentList2" resultMap="MyComment2ConstructorResultMap">
		select * from mycomment order by comment_no desc
	</select>
	
	
	
	<!-- Alias를 이용한 join -->
	<!-- 
	<select id="selectCommentList3" resultType="MyComment3">
		select comment_no "no", comment_id "id", user_name "name", comment_content "content", comment_date "date" 
		from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	 -->
	 
	<!-- resultMap을 이용한 join -->
	<resultMap type="MyComment3" id="MyComment3ResultMap">
		<id column="comment_no" property="no"/>
		<result column="comment_id" property="id"/>
		<result column="user_name" property="name"/>
		<result column="comment_content" property="content"/>
		<result column="comment_date" property="date"/>
	</resultMap>
	
	<select id="selectCommentList3" resultMap="MyComment3ResultMap">
		select comment_no, comment_id, user_name, comment_content, comment_date 
		from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	
	
	
	<!-- MyCommentUser1 DTO(두 테이블의 필드를 합친 DTO)를 이용한 join -->
	<select id="selectCommentUserList1" resultType="MyCommentUser1">
		select comment_no, comment_id, user_id, user_name, comment_content, comment_date 
		from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	
	<!-- 객체 저장 필드 DTO를 이용한 join -->
	<!-- resultMap Element의 type 속성값으로 설정된 DTO 클래스의 필드가 Java 객체를 저장하기 위한 필드로
	선언된 경우 하위 Element로 association Element를 사용해 Java 객체를 제공받아 필드에 저장 -->
	<resultMap type="MyCommentUser2" id="myCommentUserResultMap">
		<!-- association : 1:1 관계의 테이블 join에서 1개의 검색행을 Java 객체로 제공받아
		필드에 저장되도록 mapping 처리하는 Element - 포함관계 성립 -->
		<!-- ㄴ id, result를 하위 Element로 사용하여 검색행의 컬럼값이 포함관계의 객체의 필드에 저장 -->
		<!-- property 속성 : 포함관계의 객체를 저장하기 위한 필드명을 속성값으로 설정 -->
		<!-- javaType 속성 : 검색결과를 제공받기 위한 객체의 Java 자료형을 속성값으로 설정 -->
		<!-- ㄴ Java 자료형 대신 typeAlias Element로 설정된 별칭 사용 가능 -->
		<association property="comment" javaType="MyComment1">
			<id column="comment_no" property="commentNo"/>
			<result column="comment_id" property="commentId"/>
			<result column="comment_content" property="commentContent"/>
			<result column="comment_date" property="commentDate"/>
		</association>
		<association property="user" javaType="MyUser">
			<id column="user_id" property="userId"/>
			<result column="user_name" property="userName"/>
		</association>
	</resultMap>
	
	<select id="selectCommentUserList2" resultMap="myCommentUserResultMap">
		select comment_no, comment_id, user_id, user_name, comment_content, comment_date 
		from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	
	
	<!-- 게시글번호를 전달받아 MYCOMMENT 테이블에 저장된 해당 게시글번호의 게시글을 검색하여
	MyComment1 객체로 제공하는 Element - 검색행 : 1개 -->
	<select id="selectComment" parameterType="int" resultType="MyComment1">
		select * from mycomment where comment_no=#{commentNo}
	</select>
	
	<!-- 게시글번호를 전달받아 MYREPLY 테이블에 저장된 해당 게시글번호의 댓글을 검색하여
	MyReply 객체로 제공하는 Element - 검색행 : 0개 이상 -->
	<select id="selectCommentNoReplyList" parameterType="int" resultType="MyReply">
		select * from myreply where reply_comment_no=#{replyCommentNo} order by reply_no desc
	</select>
	
	
	
	<!-- resultMap Element의 type 속성값으로 설정된 클래스의 필드 자료형이 List인 경우
	collection Element를 사용하여 List 객체를 생성하여 필드에 저장되도록 설정 -->
	<!-- resultMap 엘리리먼의 하위 엘리먼트 작성 순서 -->
	<!-- ㄴ constructor, id, result, association, collection, discriminator -->
	<!-- ㄴ association 엘리먼트가 resultMap 엘리먼트의 첫번째 하위 엘리먼트인 경우 내부적으로
	selectOne 메소드를 사용하여 하나의 검색행에 대한 객체만 제공하여 필드에 저장 -->
	<!-- 문제점) association 엘리먼트가 resultMap 엘리먼트의 첫번째 하위 엘리먼트인 경우 다수의
	행이 검색된 경우 TooManyResultsException 발생 -->
	<!-- 해결법) 다수행을 검색할 경우 resultMap 엘리먼트의 첫번째 하위 엘리먼트를 association
	엘리먼트가 아닌 다른 엘리먼트로 설정하여 매핑 처리 -->
	<resultMap type="MyCommentReply" id="myCommentReplyResultMap">
		<id column="comment_no" property="commentNo"/>
		
		<association property="comment" javaType="MyComment1">
			<id column="comment_no" property="commentNo"/>
			<result column="comment_id" property="commentId"/>
			<result column="comment_content" property="commentContent"/>
			<result column="comment_date" property="commentDate"/>
		</association>
		
		<!-- collection : List 객체를 생성하여 포함 객체 필드에 저장하기 위한 Element -->
		<!-- ㄴ 1:N 관계의 테이블 JOIN에서 0개 이상의 검색행을 List 객체의 요소로 저장하여 생성 -->
		<!-- property 속성 : resultMap Element의 type 속성값으로 설정된 클래스의 필드명을 속성값으로 설정 -->
		<!-- ofType 속성 : List 객체에 저장될 요소의 자료형을 속성값으로 설정 -->
		<!-- ㄴ Java 자료형 대신 typeAlias Element로 설정된 별칭 사용 가능 -->
		<collection property="replyList" ofType="MyReply">
			<id column="reply_no" property="replyNo"/>
			<result column="reply_id" property="replyId"/>
			<result column="reply_content" property="replyContent"/>
			<result column="reply_date" property="replyDate"/>
			<result column="reply_comment_no" property="replyCommentNo"/>
		</collection>
	</resultMap>
	
	<!-- 1:N 관계 join은 반드시 OUTER JOIN(LEFT or RIGHT)을 사용하여 검색 -->
	<!-- ㄴ 댓글이 없는 게시글도 검색하기 위해 LEFT OUTER JOIN 사용 -->
	<select id="selectCommentReply" parameterType="int" resultMap="myCommentReplyResultMap">
		select comment_no, comment_id, comment_content, comment_date,
		 reply_no, reply_id, reply_content, reply_date, reply_comment_no
		 from mycomment left join myreply on comment_no=reply_comment_no
		 where comment_no=#{commentNo} order by reply_no desc
	</select>
	
	
	
<!-- 	<resultMap type="MyCommentReplyUser" id="myCommentReplyUserResultMap" autoMapping="true">
		<id column="comment_no" property="commentNo"/>
		autoMapping 속성 true로 생략 가능
		<id column="comment_no" property="commentNo"/>
		<result column="comment_id" property="commentId"/>
		<result column="comment_content" property="commentContent"/>
		<result column="comment_date" property="commentDate"/>
		
		<association property="user" javaType="MyUser" autoMapping="true">
			
			<id column="user_id" property="userId"/>
			<result column="user_name" property="userName"/>
			
		</association>
			
		<collection property="replyUserList" ofType="MyReplyUser">
			<association property="reply" javaType="MyReply" autoMapping="true">
				
				<id column="reply_no" property="replyNo"/>
				<result column="reply_id" property="replyId"/>
				<result column="reply_content" property="replyContent"/>
				<result column="reply_date" property="replyDate"/>
				<result column="reply_comment_no" property="replyCommentNo"/>
				
			</association>
			
			<association property="user" javaType="MyUser">
				<id column="reply_user_id" property="userId"/>
				<result column="reply_user_name" property="userName"/>
			</association>
		</collection>
	</resultMap>
	
	테이블 3개(comment 2번해서 총 4개) JOIN (comment-user, comment-reply)
	<select id="selectCommentReplyUser" parameterType="int" resultMap="myCommentReplyUserResultMap">
		select comment_no, comment_id, comment_content, comment_date, user_name, user_id
		, reply_no, reply_id, reply_content, reply_date, reply_comment_no, reply_user_name, reply_user_id
		 from mycomment join myuser on comment_id=user_id left join 
		 (select reply_no, reply_id, reply_content, reply_date, reply_comment_no, user_name reply_user_name,
		  user_id reply_user_id from myreply join myuser on reply_id=user_id) on comment_no=reply_comment_no
		  where comment_no=#{commentNo} order by reply_no desc
	</select> -->



	<!-- autoMapping 속성 : false, true 중 하나를 속성값으로 설정 -->
	<!-- ㄴ autoMapping 속성값을 [true]로 설정한 경우 검색행의 컬럼명과 필드명이 같은 경우 자동 mapping -->
	<resultMap type="MyCommentReplyUser" id="myCommentReplyUserResultMap" autoMapping="true">
		<id column="comment_no" property="commentNo"/>
		<association property="user" javaType="MyUser" autoMapping="true"/>
		<collection property="replyUserList" select="selectReplyUser" column="comment_no"/>
	</resultMap>
	
	<resultMap type="MyReplyUser" id="myReplyUserResultMap" autoMapping="true">
		<association property="reply" javaType="MyReply" autoMapping="true"/>
		<association property="user" javaType="MyUser" autoMapping="true"/>
	</resultMap>
	
	<select id="selectReplyUser" parameterType="int" resultMap="myReplyUserResultMap">
		select reply_no,reply_id,reply_content,reply_date,reply_comment_no,user_id,user_name
			from myreply join myuser on reply_id=user_id where reply_comment_no=#{replyCommentNo} order by reply_no desc
	</select>
	
	<select id="selectCommentReplyUser" parameterType="int" resultMap="myCommentReplyUserResultMap">
		select comment_no,comment_id,comment_content,comment_date,user_id,user_name
			,reply_no,reply_id,reply_content,reply_date,reply_comment_no
			from mycomment join myuser on comment_id=user_id left join myreply on comment_no=reply_comment_no 
			where comment_no=#{commentNo} order by reply_no desc 
	</select>
</mapper>