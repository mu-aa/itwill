<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.itwill.mapper.MyHewonMapper">
	<insert id="insertHewon" parameterType="MyHewon">
		insert into myhewon values(#{id}, #{name}, #{phone}, #{email}, #{state})
	</insert>
	
	<resultMap type="MyHewon" id="myHewonResultMap">
		<id column="hewon_id" property="id"/>
		<result column="hewon_name" property="name"/>
		<result column="hewon_phone" property="phone"/>
		<result column="hewon_email" property="email"/>
		<result column="hewon_state" property="state"/>
	</resultMap>
	
	<select id="selectHewonList" resultMap="myHewonResultMap">
		select * from myhewon order by hewon_id
	</select>
	
	
	
	<!-- discriminator : 검색행의 컬럼값을 비교하여 서로 다른 mapping 정보를 제공하기 위한 Element -->
	<!-- ㄴ 하위 Element로 case Element를 사용하여 컬럼값을 비교해 같은 경우 mapping 정보 제공 -->
	<!-- javaType 속성 : 검색행의 비교 컬럼값의 Java 자료형을 속성값으로 설정 -->
	<!-- ㄴ Java 자료형 대신 TypeAlias Element의 별칭 사용 가능 -->
	<!-- column 속성 : 검색행의 비교 컬럼명을 속성값으로 설정 -->
	<!-- 중복되는 값 생략 가능 -->
	<!-- 
	<resultMap type="MyHewon" id="myHewonDiscriminatorResultMap">
		<id column="hewon_id" property="id"/>
		<result column="hewon_state" property="state"/>
		
		<discriminator javaType="int" column="hewon_state">
			<case value="2">
				<result column="hewon_name" property="name"/>
			</case>
			<case value="3">
				<id column="hewon_id" property="id"/>
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>
			</case>
			<case value="4">
				<id column="hewon_id" property="id"/>
				<result column="hewon_name" property="name"/>
				<result column="hewon_phone" property="phone"/>
				<result column="hewon_email" property="email"/>
			</case>
		</discriminator>
	</resultMap>
	-->
	 
	<resultMap type="MyHewon" id="myHewonOneResultMap">
		<id column="hewon_id" property="id"/>
		<result column="hewon_state" property="state"/>
	</resultMap>
	
	<!-- extends 속성 : resultMap Element의 식별자를 속성값으로 설정 -->
	<!-- ㄴ 다른 resultMap Element의 mapping 정보를 상속받아 사용하기 위한 속성 -->
	<resultMap type="MyHewon" id="myHewonTwoResultMap" extends="myHewonOneResultMap">
		<result column="hewon_name" property="name"/>
	</resultMap>
	
	<resultMap type="MyHewon" id="myHewonThreeResultMap" extends="myHewonTwoResultMap">
		<result column="hewon_phone" property="phone"/>
	</resultMap>
	
	<resultMap type="MyHewon" id="myHewonFourResultMap" extends="myHewonThreeResultMap">
		<result column="hewon_email" property="email"/>
	</resultMap>

	<resultMap type="MyHewon" id="myHewonDiscriminatorResultMap">
		<discriminator javaType="int" column="hewon_state">
			<!-- resultMap 속성을 사용하여 다른 resultMap Element의 mapping 정보를 제공받아 사용 -->
			<case value="1" resultMap="myHewonOneResultMap"/>
			<case value="2" resultMap="myHewonTwoResultMap"/>
			<case value="3" resultMap="myHewonThreeResultMap"/>
			<case value="4" resultMap="myHewonFourResultMap"/>
		</discriminator>
	</resultMap>
	 
	<select id="selectDiscriminatorHewonList" resultMap="myHewonDiscriminatorResultMap">
		select * from myhewon order by hewon_id
	</select>

	

	<!-- Mapper에 등록된 SQL 명령에 필요한 값을 전달하는 방법 -->	
	<!-- ㄴ 전달값은 SQL 명령에서 #{변수명|필드명|맵키} 형식으로 표현하여 사용 -->
	<!-- ●1. XML 기반의 Mapper 파일에서 SQL 명령이 등록된 Element의 parameterType 속성값으로
	Java 자료형(별칭)을 설정하여 값을 전달받아 사용 -->
	<!-- ㄴ 단일값을 전달받기 위해 parameterType 속성에 원시형(PrimitiveType - Wrapper Class)
	또는 String 클래스를 속성값으로 설정 - SQL 명령에서 #{변수명} 형식으로 전달값 사용 -->
	<!-- ㄴ 다수값을 전달받기 위해 parameterType 속성에 JavaBean(DTO) 클래스를 속성값으로 설정
	- SQL 명령에서 #{필드명} 형식으로 전달값(필드값) 사용 -->
	<!-- ㄴ 다수값을 전달받기 위해 parameterType 속성에 HashMap 클래스(Map 인터페이스)를 속성값으로 설정
	- SQL 명령에서 #{맵키} 형식으로 전달값(맵값) 사용 -->
	<!-- ●2. 인터페이스 기반의 Mapper 파일에서 추상메소드의 매개변수에 @Param annotation을 설정하여
	매개변수에 전달값을 SQL 명령에서 사용 -->
	<!-- ㄴ 바인딩된 XML 기반의 Mapper 파일의 Element에 등록된 SQL 명령에서도 사용 가능 -->
	<!-- ㄴ XML 기반의 Mapper 파일의 Element에서 parameterType 속성 생략 -->
	
	<!-- 공개범위를 전달받아 MYHEWON 테이블에 저장된 해당 공개범위의 회원정보를 검색하여
	검색결과를 제공하는 Element -->
	<!-- SQL 명령에서 하나의 값만 전달받아 사용할 경우 parameterType 속성값으로 원시형(Wrapper Class)
	또는 String 클래스를 설정하고 SQL 명령에서 #{변수명} 형식으로 전달값 사용 -->
	<!-- ㄴ 변수명은 아무런 의미가 없으며 식별자 작성 규칙에 맞게 설정 -->
	<!-- 
	<select id="selectStateHewonList" parameterType="int" resultMap="myHewonResultMap">
		select * from myhewon where hewon_state=#{state} order by hewon_id
	</select>
	-->
	
	<!-- parameterType 속성값으로 원시형(Wrapper 클래스) 또는 String 클래스를 설정한 경우
	perameterType 속성 생략 가능  -->
	<!-- ㄴ 인터페이스 기반의 Mapper 파일과 바인딩 된 경우 전달값에 상관없이 perameterType 속성 생략 가능 -->
	<select id="selectStateHewonList" resultMap="myHewonResultMap">
		select * from myhewon where hewon_state=#{state} order by hewon_id
	</select>
	
	
	

	<!-- 이름과 이메일을 전달받아 MYHEWON 테이블에 저장된 해당 이름과 이메일의 회원정보에 대한
	아이디를 검색하여 결과를 제공하는 Element -->
	<!-- ㄴ 값을 여러개 전달받아 SQL 명령에서 사용할 경우 parameterType 속성값으로 JavaBean(DTO) 클래스를
	설정하고 SQL 명령에서는 #{필드명} 형식으로 전달받은 JavaBean 객체의 필드값 사용 -->
	<!-- 
	<select id="selectBeanHewonId" parameterType="MyHewon" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_email=#{email}
	</select>
	 -->
	<!-- 인터페이스 Mapper 파일과 바인딩된 경우 parameterType 속성 생략 가능 -->
	<select id="selectBeanHewonId" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_email=#{email}
	</select>
	
	
	
	<!-- 이름과 이메일을 전달받아 MYHEWON 테이블에 저장된 해당 이름과 이메일의 회원정보에 대한
	아이디를 검색하여 결과를 제공하는 Element -->
	<!-- ㄴ 값을 여러개 전달받아 SQL 명령에서 사용할 경우 parameterType 속성값으로 HashMap 클래스
	(Map 인터페이스)를 설정하고 SQL 명령에서는 #{맵키} 형식으로 전달받은 Map 객체의 맵값 사용 -->
	<select id="selectMapHewonId" parameterType="map" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_email=#{email}
	</select>
	
	
	
	<!-- map을 이용한 insert -->
	<insert id="insertMapHewon" parameterType="map">
		insert into myhewon values(#{id}, #{name}, #{phone}, #{email}, #{state})
	</insert>
	
	
	
	<!-- select Element의 resultType 속성값으로 hashMap 클래스(Map 인터페이스)로 설정하면 검색행을
	Map 객체로 제공 - Map 객체가 하나의 검색행을 표현 -->
	<!-- ㄴ 검색행의 컬럼명이 맵키로 mapping 되고 컬럼값이 맵값으로 저장되어 Entry로 추가 -->
	<!-- ㄴ 검색행의 컬럼명은 ★대문자로 검색★되어 맵키로 mapping 처리 -->
	<select id="selectMapHewonList" resultType="map">
		select * from myhewon order by hewon_id
	</select>
	
	
	
	<!-- 이름과 이메일을 전달받아 MYHEWON 테이블에 저장된 해당 이름과 이메일의 회원정보에 대한
	아이디를 검색하여 결과를 제공하는 Element -->
	<!-- ㄴ Mapper 바인딩 처리된 인터페이스 기반의 Mapper 파일에서 추상메소드의 매개변수에 전달된 값을
	@Param Annotation의 value 속성값으로 제공받아 SQL 명령에서 #{속성값}으로 표현하여 사용 -->
	<!-- ㄴ parameterType 속성을 반드시 생략 -->
	<select id="selectParamHewonId" resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and hewon_email=#{email}
	</select>
	
	
	
	<!-- 검색 컬럼명과 검색 단어를 전달받아 MYHEWON 테이블에 저장된 회원정보 중 검색 컬럼에
	검색 단어가 저장된 회원정보를 검색하여 검색결과를 제공하는 Element -->
	<!-- <select id="selectSearchHewonList" parameterType="map" resultMap="myHewonResultMap"> -->
		<!-- select * from myhewon where #{searchColumn}=#{searchKeyword} order by hewon_id -->
		<!-- ㄴ #{변수명|필드명|맵키} : '전달값' - SQL 명령에서 문자값으로 인식  -->
		<!-- ㄴ ${변수명|필드명|맵키} : 전달값 - SQL 명령에서 문장(컬럼값)으로 인식  -->
		<!-- ibatis framework에서는 $변수명|필드명|맵키$ 형식으로 표현 -->
		<!-- ㄴ $ 표현식은 InSQL 공격에 취약하므로 사용을 권장하지 않음 - 입력값이 아닌 option 선택값이라 안전 -->
	<!-- select * from myhewon where ${searchColumn}=#{searchKeyword} order by hewon_id
	</select>  -->
	
	
	
	<!-- 검색 컬럼명과 검색 단어를 전달받아 MYHEWON 테이블에 저장된 회원정보 중 검색 컬럼에
	검색 단어가 포함된 회원정보를 검색하여 검색결과를 제공하는 Element -->
	<!-- <select id="selectSearchHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon where ${searchColumn} like '%'||#{searchKeyword}||'%' order by hewon_id
	</select> -->
	
	<select id="selectSearchHewonList" parameterType="map" resultMap="myHewonResultMap">
		<!-- bind : SQL 명령에서 사용하기 위한 이름과 값을 설정하는 Element - 전달값 변경 -->
		<!-- ㄴ bind Element로 설정된 값은 SQL 명령에서 #{이름} 형식으로 표현 -->
		<!-- name 속성 : SQL 명령에서 사용될 값을 구분하기 위한 식별자를 속성값으로 설정 -->
		<!-- value 속성 : SQL 명령에서 사용될 값을 속성값으로 설정 -->
		<!-- ㄴ parameterType 속성으로 전달된 값을 사용할 수 있으며 문자값 결합([+] 연산자) 기능 제공 -->
		<bind name="keyword" value="'%'+searchKeyword+'%'"/>
		select * from myhewon where ${searchColumn} like #{keyword} order by hewon_id
	</select>
	
	
	
	<!-- 이름을 전달받아 MYHEWON 테이블에 저장된 해당 이름의 회원정보를 검색하여 검색결과를
	제공하는 Element -->
	<select id="selectNameHewonList" parameterType="string" resultMap="myHewonResultMap">
		select * from myhewon where hewon_name=#{name} order by hewon_id
	</select>
	
	
	
	<!-- 동적 SQL(Dynamic SQL) : 전달값에 따라 다른 SQL 명령이 Element에 등록되는 기능 -->
	<!-- ㄴ mybatis에선 OGNL(Object Graph Navigator Language) 표현식을 사용하여 구현 -->
	
	<!-- 이름을 전달받지 않을 경우 MYHEWON 테이블에 저장된 모든 회원정보를 검색하고 이름을 전달받은 경우
	MYHEWON 테이블에 저장된 해당 이름의 회원정보를 검색하여 검색결과를 제공하는 Element -->
	<!-- ㄴ 동적 SQL 관련 Element를 사용하여 전달값에 따라 SQL 명령이 다르게 등록되도록 설정 -->
	<select id="selectDynamicNameHewonList" parameterType="string" resultMap="myHewonResultMap">
		select * from myhewon
		<!-- if : 조건에 의해 Element의 내용(SQL 명령을 구성하는 문장)의 포함여부를 설정하는 Element -->
		<!-- test 속성 : false(element 내용 미포함) 또는 true(element 내용 포함) 중 하나를 속성값으로 설정 -->
		<!-- ㄴ parameterType 속성으로 전달된 값에 대한 조건식을 사용하여 test 속성값으로 제공 -->
		<if test="name!=null and name!=''"><!-- 전달값이 있는 경우 >> [true] -->
			where hewon_name=#{name}
		</if>
		order by hewon_id
	</select>
	
	<!-- 아이디 또는 이름을 전달받지 않은 경우 MYHEWON 테이블에 저장된 모든 회원정보를 검색하고 아이디 또는 이름을
	전달받은 경우 MYHEWON 테이블에 저장된 해당 아이디 또는 이름의 회원정보를 검색하여 검색결과를 제공하는 Element -->
	<!-- 문제점) 아이디와 이름이 모두 전달된 경우 에러 발생  -->
	<!-- ㄴ 모든 if Element의 test 속성값이 [true]이므로 where 문장이 2번 포함되어 에러 발생 -->
	<!-- <select id="selectDynamicHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon
		<if test="id!=null and id!=''">
			where hewon_id=#{id}
		</if>
		<if test="name!=null and name!=''">
			where hewon_name=#{name}
		</if>
		order by hewon_id
	</select> -->
	
	<!-- 해결법-1) 아이디와 이름이 모두 전달돼도 하나의 WHERE 절만 포함(사용)되도록 설정 -->
	<!-- choose : 조건에 맞는 하나의 Element 내용(SQL 명령을 구성하는 문장)이 포함되도록 설정 -->
	<!-- ㄴ 하위 Element : when Element(1개 이상), otherwise Element(0개 또는 1개) -->
	<!-- ㄴ 다수의 하위 Element 중 하나의 Element 내용만 SQL 명령에 포함 -->
	<!-- when : 조건에 의한 Element 내용 포함 여부를 설정하는 Element -->
	<!-- test 속성 : false(element 내용 미포함) 또는 true(element 내용 포함) 중 하나를 속성값으로 설정 -->
	<!-- otherwise : when Element의 모든 조건이 false인 경우 Element 내용을 포함 -->
	<!-- <select id="selectDynamicHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon
		<choose>
			<when test="id!=null and id!=''">
			where hewon_id=#{id}
		</when>
		<when test="name!=null and name!=''">
			where hewon_name=#{name}
		</when>
		</choose>
		order by hewon_id
	</select> -->
	
	<!-- 해결법-2) 아이디와 이름이 모두 전달된 경우 하나의 WHERE 절에 포함되도록 설정 -->
	<!-- ★trim : Element 내용에 필요한 값을 추가하거나 삭제하여 SQL 명령에 포함하는 Element -->
	<!-- ㄴ 하위 Element로 다수의 if Element 사용 -->
	<!-- prefix 속성 : trim Element에 내용이 존재할 경우 Element 내용 앞에 추가될 문장을 속성값으로 설정 -->
	<!-- prefixOverrides 속성 : trim Element에 내용이 존재할 경우 Element 내용 앞에 삭제될 문장을 속성값으로 설정 -->
	<!-- suffix : trim Element에 내용이 존재할 경우 Element 내용 뒤에 추가될 문장을 속성값으로 설정  -->
	<!-- suffixOverrides 속성 : trim Element에 내용이 존재할 경우 Element 내용 뒤에 삭제될 문장을 속성값으로 설정 -->
	<!-- <select id="selectDynamicHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon
		<trim prefix="where" prefixOverrides="and|or">
			<if test="id!=null and id!=''">
				hewon_id=#{id}
			</if>
			<if test="name!=null and name!=''">
				${choice} hewon_name=#{name}
			</if>
		</trim>
		order by hewon_id
	</select> -->
	
	<!-- where : Element 내용이 존재할 경우 앞에 [and] 또는 [or] 키워드가 있으면 삭제하고
	[where] 키워드를 추가하여 SQL 명령에 포함하는 Element -->
	<!-- ㄴ 하위 Element로 다수의 if Element 사용 -->
	<select id="selectDynamicHewonList" parameterType="map" resultMap="myHewonResultMap">
		select * from myhewon
		<where>
			<if test="id!=null and id!=''">
				hewon_id=#{id}
			</if>
			<if test="name!=null and name!=''">
				${choice} hewon_name=#{name}
			</if>
		</where>
		order by hewon_id
	</select>
	
	<!-- 회원정보를 전달받아 MYHEWON 테이블에 저장된 회원정보를 변경하는 Element -->
	<!-- ㄴ 아이디를 비교하여 아이디를 제외한 모든 회원정보 변경 -->
	<!-- <update id="updateHewon" parameterType="MyHewon">
		update myhewon set hewon_name=#{name}, hewon_phone=#{phone}, hewon_email=#{email}
		, hewon_state=#{state} where hewon_id=#{id}
	</update> -->
	
	<!-- 회원정보를 전달받아 MYHEWON 테이블에 저장된 회원정보를 변경하는 Element -->
	<!-- ㄴ 아이디를 비교하여 아이디를 제외한 전달값이 존재하는 회원정보 변경 -->
	<!-- test 속성에서 관계연산자[>, <, >=, <=] 대신 회피문자(gt, lt, gte, lte) 사용 -->
	<!-- ㄴ 관계연산자를 기호로 사용한 경우 에러 발생 -->
	<!-- <update id="updateDynamicHewon" parameterType="MyHewon">
		update myhewon
		<trim prefix="set" suffixOverrides=",">
			<if test="name!=null and name!=''">
				hewon_name=#{name},
			</if>
			<if test="phone!=null and phone!=''">
				hewon_phone=#{phone},
			</if>
			<if test="email!=null and email!=''">
				hewon_email=#{email},
			</if>
			<if test="state gte 1 and state lte 4">
				hewon_state=#{state}
			</if>
		</trim>
		where hewon_id=#{id}
	</update> -->
	
	<!-- set : Element 내용이 존재할 경우 Element 내용 뒤에 [,]가 있으면 삭제하고
	Element 내용 앞에 [set] 키워드를 추가하여 SQL 명령에 포함하는 Element -->
	<!-- ㄴ 하위 Element로 다수의 if Element 사용 -->
	<update id="updateDynamicHewon" parameterType="MyHewon">
		update myhewon
		<set>
			<if test="name!=null and name!=''">
				hewon_name=#{name},
			</if>
			<if test="phone!=null and phone!=''">
				hewon_phone=#{phone},
			</if>
			<if test="email!=null and email!=''">
				hewon_email=#{email},
			</if>
			<if test="state gte 1 and state lte 4">
				hewon_state=#{state}
			</if>
		</set>
		where hewon_id=#{id}
	</update>
	
	
	
	<!-- 아이디 목록을 전달받아 MYHEWON 테이블에 저장된 해당 아이디의 회원 정보를 검색하여
	검색결과를 제공하는 Element -->
	<!-- ㄴ 아이디 목록을 전달받지 못한 경우 MYHEWON 테이블에 저장된 모든 회원정보 검색 -->
	<!-- ㄴ parameterType 속성값으로 ArrayList 클래스(List 인터페이스)를 설정하여 아이디 목록을
	List 객체로 제공받아 사용 -->
	<!-- ㄴ parameterType 속성값으로 ArrayList 클래스(List 인터페이스)를 설정한 경우 List 객체를
	전달받아 SQL 명령에서 [list] 이름으로 표현하여 사용 -->
	<select id="selectMultiDynamicHewonList" parameterType="list" resultMap="myHewonResultMap">
		select * from myhewon
		<if test="list!=null">
			where hewon_id in
			<!-- foreach : 전달받은 List 객체의 요소값을 반복적으로 제공받아 SQL 명령에 포함하는 Element -->
			<!-- collection 속성 : 반복 처리하기 위한 List 객체의 이름을 속성값으로 설정 -->
			<!-- item 속성 : List 객체의 요소값을 저장하기 위한 이름을 속성값으로 설정 -->
			<!-- open 속성 : foreach Element의 내용 앞부분에 추가될 문장을 속성값으로 설정 -->
			<!-- close 속성 : foreach Element의 내용 뒷부분에 추가될 문장을 속성값으로 설정 -->
			<!-- separator 속성 : List 객체의 요소값을 구분하기 위한 문장을 속성값으로 설정 -->
			<foreach collection="list" item="id" open="(" close=")" separator=",">
				#{id}
			</foreach>
		</if>
		order by hewon_id
	</select>
	
</mapper>