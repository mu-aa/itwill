package basic;
/*

 연산자(Operator) : 계산을 목적으로 제공되는 기호 또는 키워드
 ㄴ피연산자 : 연산자에 의해 계산될 값
   ㄴ단항연산자(피연산자 1개), 이항연산자(피연산자 2개), 삼항연산자(피연산자 3개)
   ㄴ연산 우선순위 : 단항 -> 이항 -> 삼항
   
 ○단항연산자와 대입연산자는 오른쪽에서 왼쪽으로 처리가 된다
 
*/
public class OperatorApp {
	public static void main(String[] args) {
		
//		● 최우선 연산자 : 무조건 가장 먼저 처리되는 연산자
//		ㄴ () : 우선처리연산자  [] : 배열연산자  . : 객체 연산자
		
		System.out.println("10 + 20 * 3 = " + (10+20*3));
		System.out.println("(10 + 20) * 3 = " + (10+20)*3);
		System.out.println("\n=================================\n");
		
		
		
//		● 단항연산자
//		  +      양수화 연산자 : 피연산자에 곱하기 1
//        -      음수화 연산자(2의 보수) : 피연산자에 곱하기 -1
//	      ~      Bit Not 연산자(1의 보수) : 정수값으로 표현된 Bit 값을 반전시킴(0010 ->1101)
//	      !      Not 연산자 : false와 true를 반전시킴
// 	     ++      1증가 연산자 : 피연산자가 반드시 변수여야 함 
// 	     --      1감소 연산자 : 피연산자가 반드시 변수여야 함 
//	   (자료형)  강제 형 변환 연산자 : 값을 일시적으로 원하는 자료형으로 변환
//	     new     객체 생성 연산자 : 클래스의 생성자를 호출하여 객체를 생성
		
		int a1 = 10;
		System.out.println("a1 = " + a1);
		System.out.println("-a1 = " + -a1);
		System.out.println("20 > 10 = " + (20 > 10));
		System.out.println("!(20 > 10) = " + ! (20 > 10));
		
		int a2 = 10, a3 = 10;
		a2++; a3--;  // 형 변환이 일어나지 않음
		System.out.println("a2 = " + a2 + ", a3 = " + a3);
		
		int a4 = 10, a5 = 10, 
			result1 = ++a4, result2 = a5++; // 위치에 따라 연산 순서가 바뀜(++a4 = 전처리, a5++ = 후처리)
		System.out.println("a4 = " + a4 + ", a5 = " + a5);	
		System.out.println("result1 = " + result1 + " result2 = " + result2);
		System.out.println("\n=================================\n");
			
			
			
//		● 이항연산자
//		ㄴ 산술연산자, 이동연산자, 비교연산자(관계연산자), 논리연산자, 대입연산자
//		  ㄴ 산술연산자 :  *(곱)  /(나눔)  %(나머지)  +(합)  -(차)
		
		int b1=20, b2=10;
		System.out.println(b1+" * "+b2+" = " + (b1 * b2));
		System.out.println(b1+" / "+b2+" = " + (b1 / b2));
		System.out.println(b1+" % "+b2+" = " + (b1 % b2)); // 배수 표현, 범위 표현 등
		System.out.println(b1+" + "+b2+" = " + (b1 + b2));
		System.out.println(b1+" - "+b2+" = " + (b1 - b2));
		System.out.println("\n=================================\n");
		
		
		
//		이동 연산자 : 정수값을 원하는 방향으로 Bit 수만큼 이동하는 연산자                -   거의 안씀
		
//		ㄴ <<(왼쪽 이동 연산자), >>(오른쪽 이동 연산자), >>>(오른쪽 이동 연산자)
//		ㄴ 비트값을 필터링 할 때 사용함(스캔코드 / 아스키코드 중 필요한 값을 얻으려고)
//		ㄴ ex)50(10) - 4Byte : 00000000 00000000 00000000 00110010
//		ㄴ    50 << 3 :        00000000 00000000 00000001 10010000 = 400(10)  ... 50 << 3 = 50 *(2^3)
//		ㄴ    50 << 3 :        00000000 00000000 00000000 00000110 = 6(10)  ... 50 >> 3 = 50 / (2^3) - 나머지 버림
//		ㄴ   -50(10) - 4Byte : 11111111 11111111 11111111 11001110
//		ㄴ   -50 >> 3 :        11111111 11111111 11111111 11111001 : -7(10)   부호비트로 채워짐
//		ㄴ   -50 >>> 3 :       00011111 11111111 11111111 11111001 : ...      무조건 0으로 채워짐 
		
		
		
//		비교 연산자 : 값(객체)을 비교하여 false 또는 true를 출력
//		ㄴ >, >=, <, <=, ==, !=, instanceof(객체 비교연산자)
	
		System.out.println("20 > 10 = " + (20 > 10));
		System.out.println("20 < 10 = " + (20 < 10));
		System.out.println("20 == 10 = " + (20 == 10));
		System.out.println("20 != 10 = " + (20 != 10));
		System.out.println("\n=================================\n");
		
		
		
//		논리 연산자
//		ㄴ Bit 논리 연산자 : 정수값을 Bit 단위로 계산하기 위한 연산자 - &(논리곱), ^(배타적 논리합), |(논리합)
//																		하나라도0	  그냥더하기     하나라도1
//																		 00111110      00111110	      00111110
//	   																   & 11110000    ^ 11110000	    | 11110000
//		 																 00110000      11001110       11111110

//		ㄴ 일반 논리 연산자 : 비교 연산식을 연결하기 위한 연산자 - &&(And), ||(Or)
		int c = 20;
		System.out.println("c = " + c);
		System.out.println("c >= 10 && c <= 30 = " + (c >= 10 && c <= 30));
		System.out.println("c < 10 || c > 30 = " + (c < 10 || c > 30));		
		System.out.println("\n=================================\n");
		
		
		
//		대입 연산자 : 왼쪽 피연산자(변수)에 값을 저장하기 위한 연산자 - 무조건 최후순위 실행
//		ㄴ 순수 대입 연산자(=) : 값을 변수에 저장
//		ㄴ 복합 대입 연산자(*=, /=, %=, +=, -=, <<=, >>=, >>>=, &=, ^=, |=) : 값을 계산하여 변수에 저장
		
		int d = 10;
		System.out.println("d = " + d);
		d += 20;
		System.out.println("d = " + d);
		System.out.println("\n=================================\n");
		
		
		
//		● 삼항연산자 : 조건식?참값:거짓값 - 조건식의 결과에 맞는 값을 사용함
//		ㄴ 조건식 : false 또는 true중 하나의 결과값을 제공하는 연산식
		
		int e1 = 10, e2 = 20;
		System.out.println("큰 값 = " + (e1>e2 ? e1:e2));
		
		int e3 = 11;
		System.out.println("e3 = "+(e3%2==0?"짝":"홀"));
		System.out.println("\n=================================\n");
	}

}
