package inheritance;

//상속관계의 클래스에서 참조변수와 객체와의 관계
public class MemberCastApp {
	public static void main(String[] args) {
		//부모클래스 참조변수=new 부모클래스(); 
		// => 부모클래스로 객체를 생성하여 부모클래스의 참조변수에 저장 : 가능
		Member member1=new Member();
		
		//참조변수에 저장된 객체를 사용하여 부모클래스의 메소드 호출
		member1.setId("aaa");
		member1.setName("홍길동");
		
		member1.display();
		System.out.println("==============================================================");
		
		
		//자식클래스 참조변수=new 자식클래스();  --> 일반적으로 유용(부모와 자식 둘 다 참조할 수 있기 때문에)ㄴ
		// => 부모클래스의 객체와 자식클래스의 객체를 생성하고(부모클래스가 먼저 만들어지기 때문에)
		//자식클래스의 참조변수에는 자식클래스의 객체 저장 : 가능
		MemberEvent member2=new MemberEvent();
		
		//참조변수에 저장된 자식클래스의 객체를 사용하여 자식클래스의 메소드 호출이 가능하며  --> 당연히
		//부모클래스의 객체를 참조하여 부모클래스의 메소드 호출 가능  --> 상속받았기 때문에
		member2.setId("bbb");
		member2.setName("임꺽정");
		member2.setEmail("bbb@itwill.xyz");
		
		member2.display();
		System.out.println("==============================================================");
		
		
		//자식클래스 참조변수=new 부모클래스();
		// => 부모클래스로 객체를 생성하여 자식클래스의 참조변수에 저장 : 불가능
		// => 자식클래스의 참조변수에는 자식클래스의 객체를 저장해야 되지만 자식클래스의 객체가 없으므로 에러
		//MemberEvent member3=new Member();
		System.out.println("==============================================================");
		
		
		//부모클래스 참조변수=new 자식클래스(); --> 자식이 여럿일 때 유용(부모에도 객체를 생성해주기 때문에)
		// => 부모클래스의 객체와 자식클래스의 객체를 생성하고 부모클래스의 참조변수에는 
		//부모클래스의 객체 저장 : 가능    -> 자식클래스의 객체 생성 = 부모 자식 둘 다 생성되기 때문에
		Member member4=new MemberEvent();
		
		//부모클래스의 참조변수에는 부모클래스의 객체가 저장되어 있으므로 부모클래스의 메소드 호출(자식클래스 메소드 호출X)
		// => 부모클래스의 참조변수는 자식클래스의 객체를 참조할 수 없으므로 자식클래스의 메소드 호출 불가능
		// ㄴ 부모는 자식의 것을 사용X, 하려면 객체 형변환 필요
		member4.setId("ccc");
		member4.setName("전우치");
		
		//객체 형변환을 이용하여 부모클래스의 참조변수를 사용하여 자식클래스의 메소드 호출 가능
		// => 명시적 객체 형변환(강제 형변환), 묵시적 객체 형변환(자동 형변환)
		// => ★상속관계의 클래스에서만 객체 형변환 사용 가능
		
		//명시적 객체 형변환 : Cast 연산자를 사용하여 부모클래스의 참조변수 자료형을 
		//자식클래스로 변경하면 일시적으로 참조변수에는 자식클래스의 객체가 자동 저장
		// => 명시적 객체 형변환에 의해 자식클래스로 자료형이 변경된 참조변수는 자식클래스의
		//객체를 참조할 수 있으므로 자식클래스의 메소드 호출 가능
		
		/*
		MemberEvent event=(MemberEvent)member4;  -> 가능은 하지만 일회용 참조변수를 선언 할 필요 X
		event.setEmail("ccc@itwill.xyz");
		*/
		
		//Cast 연산자로 참조변수의 자료형을 일시적으로 자식클래스로 변경하고 자식클래스의 객체를 참조한 후 자식클래스의 메소드 호출
		((MemberEvent)member4).setEmail("ccc@itwill.xyz");
		
		//묵시적 객체 형변환 : //부모클래스의 메소드가 오버라이드 선언된// 자식클래스의 메소드는   --> 오버라이드 선언된 것만 가능
		//부모클래스의 숨겨진 메소드 대신 자식클래스의 메소드를 호출하기 위해 참조변수의  
		//자료형이 자동으로 자식클래스로 변경되어 자식클래스의 객체를 참조하여 메소드 호출
		//((MemberEvent)member4).display();  --> 명시적 객체 형변환
		member4.display();              //   --> 묵시적 객체 형변환	
		System.out.println("==============================================================");
	}
}











